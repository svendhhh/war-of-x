/**
 * Generated by Gas3 v2.1.0 (Granite Data Services).
 *
 * WARNING: DO NOT CHANGE THIS FILE. IT MAY BE OVERWRITTEN EACH TIME YOU USE
 * THE GENERATOR. INSTEAD, EDIT THE INHERITED CLASS (UserEntry.as).
 */

package com.hansel {

    import flash.utils.IDataInput;
    import flash.utils.IDataOutput;
    import flash.utils.IExternalizable;
    import org.granite.collections.IPersistentCollection;
    import org.granite.meta;

    use namespace meta;

    [Bindable]
    public class UserEntryBase implements IExternalizable {

        private var __initialized:Boolean = true;
        private var __detachedState:String = null;

        public var _lastSeen:Number;
        public var _nickName:String;
        public var _userID:String;

        meta function isInitialized(name:String = null):Boolean {
            if (!name)
                return __initialized;

            var property:* = this[name];
            return (
                (!(property is UserEntry) || (property as UserEntry).meta::isInitialized()) &&
                (!(property is IPersistentCollection) || (property as IPersistentCollection).isInitialized())
            );
        }

        public function set lastSeen(value:Number):void {
            _lastSeen = value;
        }
        public function get lastSeen():Number {
            return _lastSeen;
        }

        public function set nickName(value:String):void {
            _nickName = value;
        }
        public function get nickName():String {
            return _nickName;
        }

        public function set userID(value:String):void {
            _userID = value;
        }
        public function get userID():String {
            return _userID;
        }

        public function readExternal(input:IDataInput):void {
            __initialized = input.readObject() as Boolean;
            __detachedState = input.readObject() as String;
            if (meta::isInitialized()) {
                _lastSeen = function(o:*):Number { return (o is Number ? o as Number : Number.NaN) } (input.readObject());
                _nickName = input.readObject() as String;
                _userID = input.readObject() as String;
            }
            else {
                _userID = input.readObject() as String;
            }
        }

        public function writeExternal(output:IDataOutput):void {
            output.writeObject(__initialized);
            output.writeObject(__detachedState);
            if (meta::isInitialized()) {
                output.writeObject(_lastSeen);
                output.writeObject(_nickName);
                output.writeObject(_userID);
            }
            else {
                output.writeObject(_userID);
            }
        }
    }
}